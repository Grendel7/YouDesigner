<?php
/**
 * Created by PhpStorm.
 * User: hans
 * Date: 4-8-15
 * Time: 20:41
 */

namespace YouDesigner\Controllers;

use YouDesigner\Helpers\Block;
use Silex\Application;

abstract class AbstractController
{
    const LAYOUT_PROFILE = "profile";
    const LAYOUT_LOGIN = "login";
    const LAYOUT_DEFAULT = "default";
    const LAYOUT_PUBLIC = "public";
    const LAYOUT_INNER = "inner";

    /**
     * @var Application
     */
    protected $app;

    private $blocks = array();

    /**
     * Create a new controller
     *
     * @param $app Application
     */
    public function __construct($app)
    {
        $this->app = $app;
        $this->loadStandardBlocks();
        return $this;
    }

    /**
     * Load all blocks with some content
     *
     * @throws \Exception
     */
    private function loadStandardBlocks()
    {
        $this->blocks['block:content'] =                Block::create($this->app)->set(Block::TYPE_BLANK);
        $this->blocks['block:content:before'] =         Block::create($this->app)->set(Block::TYPE_BLANK);
        $this->blocks['block:content:after'] =          Block::create($this->app)->set(Block::TYPE_BLANK);
        $this->blocks['block:footer'] =                 Block::create($this->app)->set(Block::TYPE_TEXT, "Generated by YouDesigner");
        $this->blocks['block:account'] =                Block::create($this->app)->set(Block::TYPE_FILE, "block/account");
        $this->blocks['block:find_menu_item'] =         Block::create($this->app)->set(Block::TYPE_FILE, "block/find_menu_item");
        $this->blocks['block:find'] =                   Block::create($this->app)->set(Block::TYPE_FILE, "block/find");
        $this->blocks['block:client'] =                 Block::create($this->app)->set(Block::TYPE_FILE, "block/client");
        $this->blocks['block:menu:top:table'] =         Block::create($this->app)->set(Block::TYPE_FILE, "block/menu_top_table");
        $this->blocks['block:menu:top'] =               Block::create($this->app)->set(Block::TYPE_FILE, "block/menu_top");
        $this->blocks['block:menu:cpanel'] =            Block::create($this->app)->set(Block::TYPE_FILE, "block/menu_cpanel");
        $this->blocks['block:menu:cpanel:home'] =       Block::create($this->app)->set(Block::TYPE_FILE, "block/menu_cpanel_home");
        $this->blocks['block:menu:cpanel:sections'] =   Block::create($this->app)->set(Block::TYPE_FILE, "block/menu_cpanel_sections");
        $this->blocks['block:messages'] =               Block::create($this->app)->set(Block::TYPE_FILE, "block/messages");
        $this->blocks['block:selector:lang:dropdown'] = Block::create($this->app)->set(Block::TYPE_FILE, "block/selector_lang_dropdown");
        $this->blocks['block:selector:lang'] =          Block::create($this->app)->set(Block::TYPE_FILE, "block/selector_lang");
        $this->blocks['block:selector:theme:dropdown']= Block::create($this->app)->set(Block::TYPE_FILE, "block/selector_theme_dropdown");
        $this->blocks['block:selector:theme'] =         Block::create($this->app)->set(Block::TYPE_FILE, "block/selector_theme");

        $this->blocks['meta:title'] =                   Block::create($this->app)->set(Block::TYPE_TEXT, "Dashboard");
        $this->blocks['meta:js'] =                      Block::create($this->app)->set(Block::TYPE_FILE, "block/js");
        $this->blocks['meta:css'] =                     Block::create($this->app)->set(Block::TYPE_CSS);

        $this->blocks['cpanel:domain'] =                Block::create($this->app)->set(Block::TYPE_TEXT, $this->app['theme_vars']['cpanel']['domain']);
        $this->blocks['cpanel:url'] =                   Block::create($this->app)->set(Block::TYPE_TEXT, $this->app['theme_vars']['cpanel']['url']);
        $this->blocks['cpanel:logo'] =                  Block::create($this->app)->set(Block::TYPE_TEXT, $this->app['theme_vars']['cpanel']['logo']);
        $this->blocks['cpanel:login:background_color']= Block::create($this->app)->set(Block::TYPE_TEXT, $this->app['theme_vars']['cpanel']['login-background-color']);
        $this->blocks['cpanel:login:background_image']= Block::create($this->app)->set(Block::TYPE_TEXT, $this->app['theme_vars']['cpanel']['login-background-image']);
        $this->blocks['cpanel:login:foreground_color']= Block::create($this->app)->set(Block::TYPE_TEXT, $this->app['theme_vars']['cpanel']['login-foreground-color']);

        $this->blocks['client:id'] =                    Block::create($this->app)->set(Block::TYPE_TEXT, $this->app['theme_vars']['client']['id']);
        $this->blocks['client:name'] =                  Block::create($this->app)->set(Block::TYPE_TEXT, $this->app['theme_vars']['client']['name']);
        $this->blocks['client:email'] =                 Block::create($this->app)->set(Block::TYPE_TEXT, $this->app['theme_vars']['client']['email']);
        $this->blocks['client:created_at'] =            Block::create($this->app)->set(Block::TYPE_TEXT, date('Y-m-d H:i:s'));
        $this->blocks['client:created_at_timestamp'] =  Block::create($this->app)->set(Block::TYPE_TEXT, time());
    }

    /**
     * Get all blocks
     *
     * @return array
     */
    public function getBlocks()
    {
        return $this->blocks;
    }

    /**
     * Get a specific block
     *
     * @param $tag
     * @return mixed
     */
    public function getBlock($tag)
    {
        return $this->blocks[$tag];
    }

    /**
     * Set the content of a block
     *
     * @param $tag
     * @param $type
     * @param null $data
     */
    public function setBlock($tag, $type, $data = null)
    {
        $this->blocks[$tag]->set($type, $data);
    }

    /**
     * Render the current page
     *
     * @param $layout
     * @return string
     * @throws \Exception
     */
    public function render($layout)
    {
        $page = file_get_contents($this->app['base_path'] . "/theme/" . $layout . ".html");

        foreach($this->getBlocks() as $tag => $block){
            $search = "{".$tag."}";
            if(strpos($page, $search) === false){
                continue;
            }

            if(!$block->isEnabled()){
                throw new \Exception("The tag ".$tag." was used on this page but is not supported here!");
            }

            $page = str_replace($search, $block->render(), $page);
        }

        return $page;
    }
}